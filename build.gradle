buildscript {
    ext {
        kotlin_version = '1.1.3-2'
        junit_version = '4.12'
        slf4j_version = '1.7.25'
        logback_version = '1.2.3'

        bintray_release_version = '0.5.0'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.1.3-2'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'maven-publish'
    id 'idea'
}

group 'net.oddpoet'
version '0.8.2-SNAPSHOT'
description 'rspec style assertion library for kotlin test'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile(
            "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
            "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
            "org.slf4j:slf4j-api:$slf4j_version"
    )

    testCompile(
            "org.jetbrains.kotlin:kotlin-test:$kotlin_version",
            "junit:junit:$junit_version",
            "ch.qos.logback:logback-classic:$logback_version"
    )
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.6"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.6"
}

bintray {
    user = project.hasProperty("bintray.user") ? project.property("bintray.user")
            : System.getenv("BINTRAY_USER") || "unknown"
    key = project.hasProperty("bintray.key") ? project.property("bintray.key")
            : System.getenv("BINTRAY_KEY") || "N/A"
    pkg {
        repo = 'maven'
        name = project.name
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/odd-poet/kotlin-expect'
        issueTrackerUrl = 'https://github.com/odd-poet/kotlin-expect/issues'
        vcsUrl = 'https://github.com/odd-poet/kotlin-expect.git'
        labels = ['kotlin', 'expect', 'rspec']
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date()
            vcsTag = "v${project.version}"
            gpg {
                sign = true
                // passphrase = 'you know nothing, jon snow'
            }
        }
    }
    publications = ['MyPublication']
    dryRun = false
    publish = true
    override = true
}

task sourcesJar(type: Jar) {
    from sourceSets.main.kotlin.srcDirs
    classifier = 'sources'
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "oddpoet"
            name "Yunsang Choi"
            email "oddpoet@gmail.net"
        }
    }
    scm {
        url "https://github.com/odd-poet/kotlin-expect"
    }
}
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version
            artifact sourcesJar
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                root.appendNode('url', 'https://github.com/odd-poet/kotlin-expect')
                root.children().last() + pomConfig
            }

        }
    }

}


apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.9"
}
jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
